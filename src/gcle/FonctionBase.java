package gcle;

import static gcle.AjouterCoups.*;
import static gcle.Contexte.*;
import static gcle.IterateurClasse.*;
import static gcle.PFonction.*;
import gcle.fonction.Fonction;

public class FonctionBase {
    public static final Fonction fCaseAJouer = new CaseAJouer();
    static final Fonction fPiecePromotionSuivante = new SuivantePiecePromotion();
    static final Fonction fCreerPositionIterateur = new CreerIterateurPosition();
    static final Fonction fPriseOuAttaque = new PriseOuAttaque();
    static final Fonction fAjouterCoups = new AjouterCoupsNormal();
    static final Fonction fCaseDuRoi = new CaseDuRoi();
    static final Fonction fInitFiltreEchec = new InitFiltreEchec();
    static final Fonction fSimulePosition = new SimulePosition();
    static final Fonction fRetirerCoupsMiseEnEchec = new RetirerCoupsMiseEnEchec();
    static final Fonction fInitEstEnEchec = new InitEstEnEchec();
    static final Fonction fDeplacerPiece = new DeplacerPiece();
    static final Fonction fVide = new Vide();
    static final Fonction fExisteCase = new ExisteCase();
    static final Fonction fRangFinal = new RangFinal();
    static final Fonction fRangInitial = new RangInitial();
    static final Fonction fPieceOpposante = new PieceOpposante();
    static final Fonction fPionQuiALeTrait = new PionQuiALeTrait();
    static final Fonction fTypePiece = new TypePiece();
    static final Fonction fAjouterCoupsPrise = new AjouterCoupsPrise();
    static final Fonction fAjouterCoupsDeplacement = new AjouterCoupsDeplacement();
    static final Fonction fAjouterPionPromotion = new AjouterPionPromotion();
    static final Fonction fAjouterPionEnPassant = new AjouterPionEnPassant();
    static final Fonction fAjouterCoupsRoque = new AjouterCoupsRoque();
    static final Fonction fPoseRecherchePionAttaqueRoque = new PoseRecherchePionAttaqueRoque();
    static final Fonction fPremiereCaseX = new PremiereCaseX();
    static final Fonction fPiecesAJouer = new PieceAJouer();
    static final Fonction fEstAttaqueRoque = new EstAttaqueRoque();
    static final Fonction fCaseSuivanteAvancePion = new CaseSuivanteAvancePion();
    static final Fonction fCaseSuivanteDiagonalePion = new CaseSuivanteDiagonalePion();
    static final Fonction fPieceSuivante = new SuivantePiece();
    static final Fonction fInitConditionRoque = new SuivanteAileRoque();
    static final Fonction fInitSelonGlissant = new InitSelonGlissant();
    static final Fonction fIterateurRoque = new SuivanteCaseRoque();
    static final Fonction fSensSuivantPionPromotion = new SensSuivantPionPromotion();
    static final Fonction fExisteCaseEP = new ExisteCaseEP();
    static final Fonction fRoqueContexte = new RoqueContexte();
    static final Fonction fRoquesEtat = new RoquesEtat();
    static final Fonction fConditionRoque = new ExisteAileSuivante();
    static final Fonction fRoquePossible = new RoquePossible();
    static final Fonction fExistePieceSuivante = new ExistePieceSuivante();
    static final Fonction fEstUnPion = new EstUnPion();
    static final Fonction fCaseSuivanteDirection = new CaseSuivanteDirection();
    static final Fonction fPseudoCoupsPion = new PseudoCoupsPion();
    static final Fonction fExisteCoupsPromotionSuivant = new ExisteCoupsPromotionSuivant();
    static final Fonction fCreerCoupsPromotionIterateur = new CreerIterateurPromotion();
    static final Fonction fSuivantRoque = new ExisteAttaqueRoqueSuivante();
    static final Fonction fCaseAttaqueRoque = new CasesAttaqueRoque();
    static final Fonction fExisteCoupsPionSuivant = new ExisteCoupsPionSuivant();
    static final Fonction fSensSuivant = new SuivantSens();
    static final Fonction fCreerCoupsPionIterateur = new CreerIterateurSens();
    static final Fonction fEstPieceGlissante = new EstPieceGlissante();
    static final Fonction fInitPseudoCoupsPion = new InitPseudoCoupsPion();
    static final Fonction fInitRoques = new InitRoques();
    static final Fonction fIterateurAileRoques = new CreerIterateurAileRoque();
    static final Fonction fIterateurAtaqueRoque = new CreerIterateurAttaqueRoque();
    static final Fonction fFiltreEchec = new FiltreEchec();
    static final Fonction fExisteCoupsARetirerSuivant = new ExisteCoupsARetirerSuivant();
    static final Fonction fAjouterCoupsARetirer = new AjouterCoupsARetirer();
    static final Fonction fIterateurFiltreEchecs = new IterateurFiltreEchecs();
    static final Fonction fEstCaseDuRoi = new EstCaseDuRoi();
    static final Fonction fTypeDeplOuPrise = new TypeDeplOuPrise();
    static final Fonction fTypeEnPassant = new TypeEnPassant();
    static final Fonction fTypePromotion = new TypePromotion();
    static final Fonction fDeplacerPieceEnPassant = new DeplacerPieceEnPassant();
    static final Fonction fDeplacerPiecePromotion = new DeplacerPiecePromotion();
    static final Fonction fCreerIterateurFiltreEchec = new CreerIterateurFiltreEchec();
    static final Fonction fCreerIterateurPositionSimule = new CreerIterateurPositionSimule();
}
